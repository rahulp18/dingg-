// User model to store information about users (admin, salon owner, salon employee, normal user)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  SUPER_ADMIN
  SALON_OWNER
  STAF
  CLIENT
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  role         UserRole
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  salonOwner   SalonOwner?
  staff        Staff?
  client       Client?
  superAdmin   SuperAdmin?
  profileImage ProfileImage?
  otp          OTP?
  fullName     String
  phoneNumber  String @unique
}

model SuperAdmin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model OTP {
  id         Int      @id @default(autoincrement())
  code       String
  expiryTime DateTime
  verified   Boolean
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// SalonOwner model to store information about salon owners
model SalonOwner {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
  salons   Salon[]
  fullName String
}

// SalonEmployee model to store information about salon employees
model Staff {
  id         Int    @id @default(autoincrement())
  userId     Int    @unique
  user       User   @relation(fields: [userId], references: [id])
  salon      Salon  @relation(fields: [salonId], references: [id])
  salonId    Int
  experience String

  @@index([salonId])
}

// Customer model to store information about normal users
model Client {
  id           Int           @id @default(autoincrement())
  image        String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  
  addres       String
  appointments Appointment[]
}

// Salon model to store information about salons
model Salon {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  city         String
  state        String
  country      String
  owner        SalonOwner    @relation(fields: [ownerId], references: [id])
  ownerId      Int
  staff        Staff[]
  inventory    Inventory[]
  services     Service[]
  appointments Appointment[]
  latitude     Float // Geographical latitude
  longitude    Float
  images       Image[]

  @@index([ownerId])
}

// Inventory model to store information about salon inventory
model Inventory {
  id       Int    @id @default(autoincrement())
  product  String
  quantity Int
  salon    Salon  @relation(fields: [salonId], references: [id])
  salonId  Int
  image    String

  @@index([salonId])
}

// Service model to store information about salon services
model Service {
  id      Int     @id @default(autoincrement())
  name    String
  price   Float
  salon   Salon   @relation(fields: [salonId], references: [id])
  salonId Int
  images  Image[]

  @@index([salonId])
}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String // URL or file path to the image
  salonId   Int? // Nullable field for relation with Salon
  serviceId Int? // Nullable field for relation with Service
  salon     Salon?   @relation(fields: [salonId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])

  @@index([salonId])
  @@index([serviceId])
}

// Appointment model to store information about salon appointments
model Appointment {
  id          Int               @id @default(autoincrement())
  client      Client            @relation(fields: [customerId], references: [id])
  customerId  Int
  salon       Salon             @relation(fields: [salonId], references: [id])
  salonId     Int
  serviceId   Int
  status      AppointmentStatus
  scheduledAt DateTime

  @@index([customerId])
  @@index([salonId])
}

model ProfileImage {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
  url    String
}

// Enum for appointment status
enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}
